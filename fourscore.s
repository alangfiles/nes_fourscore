;
; File generated by cc65 v 2.18 - N/A
;
	.fopt		compiler,"cc65 v 2.18 - N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_bank_spr
	.import		_set_vram_update
	.import		_memcpy
	.import		_set_vram_buffer
	.import		_clear_vram_buffer
	.import		_set_scroll_y
	.import		_get_ppu_addr
	.import		_set_data_pointer
	.import		_set_mt_pointer
	.import		_buffer_4_mt
	.import		_flush_vram_update2
	.import		_pad_poll_4score_1_3
	.import		_pad_poll_4score_2_4
	.export		_RoundSpr1
	.export		_RoundSpr2
	.export		_RoundSpr3
	.export		_RoundSpr4
	.export		_doublepad
	.export		_generic_pad
	.export		_pad1
	.export		_pad2
	.export		_pad3
	.export		_pad4
	.export		_collision
	.export		_collision_L
	.export		_collision_R
	.export		_collision_U
	.export		_collision_D
	.export		_coordinates
	.export		_temp1
	.export		_temp2
	.export		_temp3
	.export		_temp4
	.export		_temp5
	.export		_temp6
	.export		_eject_L
	.export		_eject_R
	.export		_eject_D
	.export		_eject_U
	.export		_direction
	.export		_address
	.export		_x
	.export		_y
	.export		_index
	.export		_map
	.export		_scroll_x
	.export		_scroll_y
	.export		_hero_velocity_x
	.export		_hero_velocity_y
	.export		_old_x
	.export		_old_y
	.export		_temp_x
	.export		_temp_y
	.export		_c_map
	.export		_c_map2
	.export		_Generic
	.export		_GenericBoxGuy
	.export		_BoxGuy1
	.export		_BoxGuy2
	.export		_BoxGuy3
	.export		_BoxGuy4
	.export		_palette_bg
	.export		_palette_sp
	.export		_metatiles1
	.export		_Room1
	.export		_load_room
	.export		_draw_sprites
	.export		_movement
	.export		_bg_collision_sub
	.export		_bg_coll_L
	.export		_bg_coll_R
	.export		_bg_coll_U
	.export		_bg_coll_D
	.export		_main

.segment	"DATA"

_BoxGuy1:
	.word	$4000
	.word	$3000
_BoxGuy2:
	.word	$8000
	.word	$3000
_BoxGuy3:
	.word	$A000
	.word	$3000
_BoxGuy4:
	.word	$C000
	.word	$3000

.segment	"RODATA"

_RoundSpr1:
	.byte	$FF
	.byte	$FF
	.byte	$02
	.byte	$00
	.byte	$07
	.byte	$FF
	.byte	$03
	.byte	$00
	.byte	$FF
	.byte	$07
	.byte	$12
	.byte	$00
	.byte	$07
	.byte	$07
	.byte	$13
	.byte	$00
	.byte	$80
_RoundSpr2:
	.byte	$FF
	.byte	$FF
	.byte	$02
	.byte	$01
	.byte	$07
	.byte	$FF
	.byte	$03
	.byte	$01
	.byte	$FF
	.byte	$07
	.byte	$12
	.byte	$01
	.byte	$07
	.byte	$07
	.byte	$13
	.byte	$01
	.byte	$80
_RoundSpr3:
	.byte	$FF
	.byte	$FF
	.byte	$02
	.byte	$02
	.byte	$07
	.byte	$FF
	.byte	$03
	.byte	$02
	.byte	$FF
	.byte	$07
	.byte	$12
	.byte	$02
	.byte	$07
	.byte	$07
	.byte	$13
	.byte	$02
	.byte	$80
_RoundSpr4:
	.byte	$FF
	.byte	$FF
	.byte	$02
	.byte	$03
	.byte	$07
	.byte	$FF
	.byte	$03
	.byte	$03
	.byte	$FF
	.byte	$07
	.byte	$12
	.byte	$03
	.byte	$07
	.byte	$07
	.byte	$13
	.byte	$03
	.byte	$80
_palette_bg:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$0F
	.byte	$07
	.byte	$17
	.byte	$27
	.byte	$0F
	.byte	$02
	.byte	$12
	.byte	$22
	.byte	$0F
	.byte	$09
	.byte	$19
	.byte	$29
_palette_sp:
	.byte	$0F
	.byte	$07
	.byte	$28
	.byte	$38
	.byte	$0F
	.byte	$07
	.byte	$0A
	.byte	$38
	.byte	$0F
	.byte	$07
	.byte	$20
	.byte	$38
	.byte	$0F
	.byte	$07
	.byte	$14
	.byte	$38
_metatiles1:
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$02
	.byte	$05
	.byte	$06
	.byte	$08
	.byte	$07
	.byte	$01
	.byte	$05
	.byte	$06
	.byte	$08
	.byte	$07
	.byte	$00
_Room1:
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04

.segment	"BSS"

.segment	"ZEROPAGE"
_doublepad:
	.res	2,$00
_generic_pad:
	.res	1,$00
_pad1:
	.res	1,$00
_pad2:
	.res	1,$00
_pad3:
	.res	1,$00
_pad4:
	.res	1,$00
_collision:
	.res	1,$00
_collision_L:
	.res	1,$00
_collision_R:
	.res	1,$00
_collision_U:
	.res	1,$00
_collision_D:
	.res	1,$00
_coordinates:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_temp5:
	.res	2,$00
_temp6:
	.res	2,$00
_eject_L:
	.res	1,$00
_eject_R:
	.res	1,$00
_eject_D:
	.res	1,$00
_eject_U:
	.res	1,$00
_direction:
	.res	1,$00
_address:
	.res	2,$00
_x:
	.res	1,$00
_y:
	.res	1,$00
_index:
	.res	1,$00
_map:
	.res	1,$00
_scroll_x:
	.res	2,$00
_scroll_y:
	.res	2,$00
_hero_velocity_x:
	.res	2,$00
_hero_velocity_y:
	.res	2,$00
_old_x:
	.res	2,$00
_old_y:
	.res	2,$00
_temp_x:
	.res	1,$00
_temp_y:
	.res	1,$00
.segment	"BSS"
_c_map:
	.res	240,$00
_c_map2:
	.res	240,$00
_Generic:
	.res	4,$00
_GenericBoxGuy:
	.res	4,$00

; ---------------------------------------------------------------
; void __near__ load_room (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_room: near

.segment	"CODE"

;
; set_data_pointer(Room1);
;
	lda     #<(_Room1)
	ldx     #>(_Room1)
	jsr     _set_data_pointer
;
; set_mt_pointer(metatiles1);
;
	lda     #<(_metatiles1)
	ldx     #>(_metatiles1)
	jsr     _set_mt_pointer
;
; for(y=0; ;y+=0x20){
;
	lda     #$00
L02F7:	sta     _y
;
; for(x=0; ;x+=0x20){
;
	lda     #$00
L02F6:	sta     _x
;
; address = get_ppu_addr(0, x, y);
;
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + (x >> 4);
;
	lda     _y
	and     #$F0
	sta     ptr1
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; if (x == 0xe0) break;
;
	ldx     #$00
	lda     _x
	cmp     #$E0
	beq     L02F8
;
; for(x=0; ;x+=0x20){
;
	lda     #$20
	clc
	adc     _x
	jmp     L02F6
;
; if (y == 0xe0) break;
;
L02F8:	lda     _y
	cmp     #$E0
	beq     L02F9
;
; for(y=0; ;y+=0x20){
;
	lda     #$20
	clc
	adc     _y
	jmp     L02F7
;
; set_vram_update(NULL); // just turn ppu updates OFF for this example
;
L02F9:	txa
	jsr     _set_vram_update
;
; memcpy (c_map, Room1, 240);
;
	ldy     #$00
L01EE:	lda     _Room1,y
	sta     _c_map,y
	iny
	cpy     #$F0
	bne     L01EE
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; temp_x = BoxGuy1.x >> 8;
;
	lda     _BoxGuy1+1
	sta     _temp_x
;
; temp_y = BoxGuy1.y >> 8;
;
	lda     _BoxGuy1+3
	sta     _temp_y
;
; if(temp_x == 0) temp_x = 1;
;
	lda     _temp_x
	bne     L02FA
	lda     #$01
	sta     _temp_x
;
; if(temp_y == 0) temp_y = 1;
;
L02FA:	lda     _temp_y
	bne     L01F9
	lda     #$01
	sta     _temp_y
;
; oam_meta_spr(temp_x, temp_y, RoundSpr1);
;
L01F9:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_RoundSpr1)
	ldx     #>(_RoundSpr1)
	jsr     _oam_meta_spr
;
; temp_x = BoxGuy2.x >> 8;
;
	lda     _BoxGuy2+1
	sta     _temp_x
;
; temp_y = BoxGuy2.y >> 8;
;
	lda     _BoxGuy2+3
	sta     _temp_y
;
; if(temp_x == 0) temp_x = 1;
;
	lda     _temp_x
	bne     L02FB
	lda     #$01
	sta     _temp_x
;
; if(temp_y == 0) temp_y = 1;
;
L02FB:	lda     _temp_y
	bne     L0209
	lda     #$01
	sta     _temp_y
;
; oam_meta_spr(temp_x, temp_y, RoundSpr2);
;
L0209:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_RoundSpr2)
	ldx     #>(_RoundSpr2)
	jsr     _oam_meta_spr
;
; temp_x = BoxGuy3.x >> 8;
;
	lda     _BoxGuy3+1
	sta     _temp_x
;
; temp_y = BoxGuy3.y >> 8;
;
	lda     _BoxGuy3+3
	sta     _temp_y
;
; if(temp_x == 0) temp_x = 1;
;
	lda     _temp_x
	bne     L02FC
	lda     #$01
	sta     _temp_x
;
; if(temp_y == 0) temp_y = 1;
;
L02FC:	lda     _temp_y
	bne     L0219
	lda     #$01
	sta     _temp_y
;
; oam_meta_spr(temp_x, temp_y, RoundSpr3);
;
L0219:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_RoundSpr3)
	ldx     #>(_RoundSpr3)
	jsr     _oam_meta_spr
;
; temp_x = BoxGuy4.x >> 8;
;
	lda     _BoxGuy4+1
	sta     _temp_x
;
; temp_y = BoxGuy4.y >> 8;
;
	lda     _BoxGuy4+3
	sta     _temp_y
;
; if(temp_x == 0) temp_x = 1;
;
	lda     _temp_x
	bne     L02FD
	lda     #$01
	sta     _temp_x
;
; if(temp_y == 0) temp_y = 1;
;
L02FD:	lda     _temp_y
	bne     L0229
	lda     #$01
	sta     _temp_y
;
; oam_meta_spr(temp_x, temp_y, RoundSpr4);
;
L0229:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_RoundSpr4)
	ldx     #>(_RoundSpr4)
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movement: near

.segment	"CODE"

;
; old_x = GenericBoxGuy.x;
;
	lda     _GenericBoxGuy+1
	sta     _old_x+1
	lda     _GenericBoxGuy
	sta     _old_x
;
; if(generic_pad & PAD_LEFT){
;
	lda     _generic_pad
	and     #$02
	beq     L0304
;
; direction = LEFT;
;
	lda     #$00
	sta     _direction
;
; hero_velocity_x = -SPEED;
;
	ldx     #$FE
;
; else if (generic_pad & PAD_RIGHT){
;
	jmp     L0312
L0304:	lda     _generic_pad
	ldx     #$00
	and     #$01
	beq     L0306
;
; direction = RIGHT;
;
	lda     #$01
	sta     _direction
;
; hero_velocity_x = SPEED;
;
	inx
L0312:	lda     #$80
;
; hero_velocity_x = 0;
;
L0306:	sta     _hero_velocity_x
	stx     _hero_velocity_x+1
;
; GenericBoxGuy.x += hero_velocity_x;
;
	lda     _hero_velocity_x
	clc
	adc     _GenericBoxGuy
	sta     _GenericBoxGuy
	lda     _hero_velocity_x+1
	adc     _GenericBoxGuy+1
	sta     _GenericBoxGuy+1
;
; if(GenericBoxGuy.x > 0xf100) { // too far, don't wrap around
;
	lda     _GenericBoxGuy
	cmp     #$01
	lda     _GenericBoxGuy+1
	sbc     #$F1
	bcc     L0309
;
; if(old_x >= 0x8000){
;
	lda     _old_x
	cmp     #$00
	lda     _old_x+1
	sbc     #$80
	lda     #$00
	tax
	bcc     L0308
;
; GenericBoxGuy.x = 0xf100; // max right
;
	ldx     #$F1
;
; GenericBoxGuy.x = 0x0000; // max left
;
L0308:	sta     _GenericBoxGuy
	stx     _GenericBoxGuy+1
;
; Generic.x = GenericBoxGuy.x >> 8; // the collision routine needs an 8 bit value
;
L0309:	lda     _GenericBoxGuy+1
	sta     _Generic
;
; Generic.y = GenericBoxGuy.y >> 8;
;
	lda     _GenericBoxGuy+3
	sta     _Generic+1
;
; Generic.width = HERO_WIDTH;
;
	lda     #$0D
	sta     _Generic+2
;
; Generic.height = HERO_HEIGHT;
;
	sta     _Generic+3
;
; if(hero_velocity_x < 0){ // going left
;
	ldx     _hero_velocity_x+1
	cpx     #$80
	bcc     L0257
;
; if(bg_coll_L() ){ // check collision left
;
	jsr     _bg_coll_L
	tax
	beq     L0263
;
; high_byte(GenericBoxGuy.x) = high_byte(GenericBoxGuy.x) - eject_L;
;
	lda     _GenericBoxGuy+1
	sec
	sbc     _eject_L
;
; else if(hero_velocity_x > 0){ // going right
;
	jmp     L0313
L0257:	lda     _hero_velocity_x
	cmp     #$01
	lda     _hero_velocity_x+1
	sbc     #$00
	bvs     L0262
	eor     #$80
L0262:	bpl     L0263
;
; if(bg_coll_R() ){ // check collision right
;
	jsr     _bg_coll_R
	tax
	beq     L0263
;
; high_byte(GenericBoxGuy.x) = high_byte(GenericBoxGuy.x) - eject_R;
;
	lda     _GenericBoxGuy+1
	sec
	sbc     _eject_R
L0313:	sta     _GenericBoxGuy+1
;
; old_y = GenericBoxGuy.y;
;
L0263:	lda     _GenericBoxGuy+2+1
	sta     _old_y+1
	lda     _GenericBoxGuy+2
	sta     _old_y
;
; if(generic_pad & PAD_UP){
;
	lda     _generic_pad
	and     #$08
	beq     L030A
;
; hero_velocity_y = -SPEED;
;
	ldx     #$FE
;
; else if (generic_pad & PAD_DOWN){
;
	jmp     L0314
L030A:	lda     _generic_pad
	ldx     #$00
	and     #$04
	beq     L030C
;
; hero_velocity_y = SPEED;
;
	inx
L0314:	lda     #$80
;
; hero_velocity_y = 0;
;
L030C:	sta     _hero_velocity_y
	stx     _hero_velocity_y+1
;
; GenericBoxGuy.y += hero_velocity_y;
;
	lda     _hero_velocity_y
	clc
	adc     _GenericBoxGuy+2
	sta     _GenericBoxGuy+2
	lda     _hero_velocity_y+1
	adc     _GenericBoxGuy+2+1
	sta     _GenericBoxGuy+2+1
;
; if(GenericBoxGuy.y > 0xe000) { // too far, don't wrap around
;
	lda     _GenericBoxGuy+2
	cmp     #$01
	lda     _GenericBoxGuy+2+1
	sbc     #$E0
	bcc     L030F
;
; if(old_y >= 0x8000){
;
	lda     _old_y
	cmp     #$00
	lda     _old_y+1
	sbc     #$80
	lda     #$00
	tax
	bcc     L030E
;
; GenericBoxGuy.y = 0xe000; // max down
;
	ldx     #$E0
;
; GenericBoxGuy.y = 0x0000; // max up
;
L030E:	sta     _GenericBoxGuy+2
	stx     _GenericBoxGuy+2+1
;
; Generic.x = GenericBoxGuy.x >> 8; // the collision routine needs an 8 bit value
;
L030F:	lda     _GenericBoxGuy+1
	sta     _Generic
;
; Generic.y = GenericBoxGuy.y >> 8;
;
	lda     _GenericBoxGuy+3
	sta     _Generic+1
;
; if(hero_velocity_y < 0){ // going up
;
	ldx     _hero_velocity_y+1
	cpx     #$80
	bcc     L0286
;
; if(bg_coll_U() ){ // check collision left
;
	jsr     _bg_coll_U
	tax
	beq     L0292
;
; high_byte(GenericBoxGuy.y) = high_byte(GenericBoxGuy.y) - eject_U;
;
	lda     _GenericBoxGuy+3
	sec
	sbc     _eject_U
;
; else if(hero_velocity_y > 0){ // going down
;
	jmp     L0315
L0286:	lda     _hero_velocity_y
	cmp     #$01
	lda     _hero_velocity_y+1
	sbc     #$00
	bvs     L0291
	eor     #$80
L0291:	bpl     L0292
;
; if(bg_coll_D() ){ // check collision right
;
	jsr     _bg_coll_D
	tax
	beq     L0292
;
; high_byte(GenericBoxGuy.y) = high_byte(GenericBoxGuy.y) - eject_D;
;
	lda     _GenericBoxGuy+3
	sec
	sbc     _eject_D
L0315:	sta     _GenericBoxGuy+3
;
; } 
;
L0292:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_collision_sub (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision_sub: near

.segment	"CODE"

;
; if(temp_y >= 0xf0) return 0;
;
	lda     _temp_y
	cmp     #$F0
	ldx     #$00
	bcc     L0316
	txa
	rts
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0);
;
L0316:	lda     _temp_x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; collision = c_map[coordinates];
;
	ldy     _coordinates
	lda     _c_map,y
	sta     _collision
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_L (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_L: near

.segment	"CODE"

;
; temp_x = Generic.x;
;
	lda     _Generic
	sta     _temp_x
;
; eject_L = temp_x | 0xf0;
;
	ora     #$F0
	sta     _eject_L
;
; temp_y = Generic.y + 2;
;
	lda     _Generic+1
	clc
	adc     #$02
	sta     _temp_y
;
; if(bg_collision_sub() ) return 1;
;
	jsr     _bg_collision_sub
	tax
	beq     L0319
	ldx     #$00
	lda     #$01
	rts
;
; temp_y = Generic.y + Generic.height;
;
L0319:	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; temp_y -= 2;
;
	sec
	sbc     #$02
	sta     _temp_y
;
; if(bg_collision_sub() ) return 1;
;
	jsr     _bg_collision_sub
	tax
	beq     L031B
	ldx     #$00
	lda     #$01
	rts
;
; }
;
L031B:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_R (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_R: near

.segment	"CODE"

;
; temp_x = Generic.x + Generic.width;
;
	lda     _Generic
	clc
	adc     _Generic+2
	sta     _temp_x
;
; eject_R = (temp_x + 1) & 0x0f;
;
	clc
	adc     #$01
	and     #$0F
	sta     _eject_R
;
; temp_y = Generic.y + 2;
;
	lda     _Generic+1
	clc
	adc     #$02
	sta     _temp_y
;
; if(bg_collision_sub() ) return 1;
;
	jsr     _bg_collision_sub
	tax
	beq     L031E
	ldx     #$00
	lda     #$01
	rts
;
; temp_y = Generic.y + Generic.height;
;
L031E:	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; temp_y -= 2;
;
	sec
	sbc     #$02
	sta     _temp_y
;
; if(bg_collision_sub() ) return 1;
;
	jsr     _bg_collision_sub
	tax
	beq     L0320
	ldx     #$00
	lda     #$01
	rts
;
; }
;
L0320:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_U (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_U: near

.segment	"CODE"

;
; temp_x = Generic.x + 2;
;
	lda     _Generic
	clc
	adc     #$02
	sta     _temp_x
;
; temp_y = Generic.y;
;
	lda     _Generic+1
	sta     _temp_y
;
; eject_U = temp_y | 0xf0;
;
	ora     #$F0
	sta     _eject_U
;
; if(bg_collision_sub() ) return 1;
;
	jsr     _bg_collision_sub
	tax
	beq     L0322
	ldx     #$00
	lda     #$01
	rts
;
; temp_x = Generic.x + Generic.width;
;
L0322:	lda     _Generic
	clc
	adc     _Generic+2
	sta     _temp_x
;
; temp_x -= 2;
;
	sec
	sbc     #$02
	sta     _temp_x
;
; if(bg_collision_sub() ) return 1;
;
	jsr     _bg_collision_sub
	tax
	beq     L0324
	ldx     #$00
	lda     #$01
	rts
;
; }
;
L0324:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_D (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_D: near

.segment	"CODE"

;
; temp_x = Generic.x + 2;
;
	lda     _Generic
	clc
	adc     #$02
	sta     _temp_x
;
; temp_y = Generic.y + Generic.height;
;
	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; eject_D = (temp_y + 1) & 0x0f;
;
	clc
	adc     #$01
	and     #$0F
	sta     _eject_D
;
; if(bg_collision_sub() ) return 1;
;
	jsr     _bg_collision_sub
	tax
	beq     L0327
	ldx     #$00
	lda     #$01
	rts
;
; temp_x = Generic.x + Generic.width;
;
L0327:	lda     _Generic
	clc
	adc     _Generic+2
	sta     _temp_x
;
; temp_x -= 2;
;
	sec
	sbc     #$02
	sta     _temp_x
;
; if(bg_collision_sub() ) return 1;
;
	jsr     _bg_collision_sub
	tax
	beq     L0329
	ldx     #$00
	lda     #$01
	rts
;
; }
;
L0329:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; pal_bg(palette_bg);
;
	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; set_vram_buffer(); // do at least once, sets a pointer to a buffer
;
	jsr     _set_vram_buffer
;
; load_room();
;
	jsr     _load_room
;
; set_scroll_y(0xff); // shift the bg down 1 pixel
;
	ldx     #$00
	lda     #$FF
	jsr     _set_scroll_y
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
L0188:	jsr     _ppu_wait_nmi
;
; doublepad = pad_poll_4score_1_3();
;
	jsr     _pad_poll_4score_1_3
	sta     _doublepad
	stx     _doublepad+1
;
; pad1 = high_byte(doublepad); //the high byte is the first controller's input
;
	lda     _doublepad+1
	sta     _pad1
;
; pad3 = low_byte(doublepad); // low byte is the third controller's input
;
	lda     _doublepad
	sta     _pad3
;
; doublepad = pad_poll_4score_2_4();
;
	jsr     _pad_poll_4score_2_4
	sta     _doublepad
	stx     _doublepad+1
;
; pad2 = high_byte(doublepad);
;
	lda     _doublepad+1
	sta     _pad2
;
; pad4 = low_byte(doublepad);
;
	lda     _doublepad
	sta     _pad4
;
; GenericBoxGuy = BoxGuy1;
;
	lda     _BoxGuy1+3
	sta     sreg+1
	lda     _BoxGuy1+2
	sta     sreg
	ldx     _BoxGuy1+1
	lda     _BoxGuy1
	sta     _GenericBoxGuy
	stx     _GenericBoxGuy+1
	ldy     sreg
	sty     _GenericBoxGuy+2
	ldy     sreg+1
	sty     _GenericBoxGuy+3
;
; generic_pad = pad1;
;
	lda     _pad1
	sta     _generic_pad
;
; movement();
;
	jsr     _movement
;
; BoxGuy1.x = GenericBoxGuy.x;
;
	lda     _GenericBoxGuy+1
	sta     _BoxGuy1+1
	lda     _GenericBoxGuy
	sta     _BoxGuy1
;
; BoxGuy1.y = GenericBoxGuy.y;
;
	lda     _GenericBoxGuy+2+1
	sta     _BoxGuy1+2+1
	lda     _GenericBoxGuy+2
	sta     _BoxGuy1+2
;
; GenericBoxGuy = BoxGuy2;
;
	lda     _BoxGuy2+3
	sta     sreg+1
	lda     _BoxGuy2+2
	sta     sreg
	ldx     _BoxGuy2+1
	lda     _BoxGuy2
	sta     _GenericBoxGuy
	stx     _GenericBoxGuy+1
	ldy     sreg
	sty     _GenericBoxGuy+2
	ldy     sreg+1
	sty     _GenericBoxGuy+3
;
; generic_pad = pad2;
;
	lda     _pad2
	sta     _generic_pad
;
; movement();
;
	jsr     _movement
;
; BoxGuy2.x = GenericBoxGuy.x;
;
	lda     _GenericBoxGuy+1
	sta     _BoxGuy2+1
	lda     _GenericBoxGuy
	sta     _BoxGuy2
;
; BoxGuy2.y = GenericBoxGuy.y;
;
	lda     _GenericBoxGuy+2+1
	sta     _BoxGuy2+2+1
	lda     _GenericBoxGuy+2
	sta     _BoxGuy2+2
;
; GenericBoxGuy = BoxGuy3;
;
	lda     _BoxGuy3+3
	sta     sreg+1
	lda     _BoxGuy3+2
	sta     sreg
	ldx     _BoxGuy3+1
	lda     _BoxGuy3
	sta     _GenericBoxGuy
	stx     _GenericBoxGuy+1
	ldy     sreg
	sty     _GenericBoxGuy+2
	ldy     sreg+1
	sty     _GenericBoxGuy+3
;
; generic_pad = pad3;
;
	lda     _pad3
	sta     _generic_pad
;
; movement();
;
	jsr     _movement
;
; BoxGuy3.x = GenericBoxGuy.x;
;
	lda     _GenericBoxGuy+1
	sta     _BoxGuy3+1
	lda     _GenericBoxGuy
	sta     _BoxGuy3
;
; BoxGuy3.y = GenericBoxGuy.y;
;
	lda     _GenericBoxGuy+2+1
	sta     _BoxGuy3+2+1
	lda     _GenericBoxGuy+2
	sta     _BoxGuy3+2
;
; GenericBoxGuy = BoxGuy4;
;
	lda     _BoxGuy4+3
	sta     sreg+1
	lda     _BoxGuy4+2
	sta     sreg
	ldx     _BoxGuy4+1
	lda     _BoxGuy4
	sta     _GenericBoxGuy
	stx     _GenericBoxGuy+1
	ldy     sreg
	sty     _GenericBoxGuy+2
	ldy     sreg+1
	sty     _GenericBoxGuy+3
;
; generic_pad = pad4;
;
	lda     _pad4
	sta     _generic_pad
;
; movement();
;
	jsr     _movement
;
; BoxGuy4.x = GenericBoxGuy.x;
;
	lda     _GenericBoxGuy+1
	sta     _BoxGuy4+1
	lda     _GenericBoxGuy
	sta     _BoxGuy4
;
; BoxGuy4.y = GenericBoxGuy.y;
;
	lda     _GenericBoxGuy+2+1
	sta     _BoxGuy4+2+1
	lda     _GenericBoxGuy+2
	sta     _BoxGuy4+2
;
; draw_sprites();
;
	jsr     _draw_sprites
;
; while (1){
;
	jmp     L0188

.endproc

